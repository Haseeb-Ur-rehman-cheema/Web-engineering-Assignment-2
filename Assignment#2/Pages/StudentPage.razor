@page "/student"
@using Assignment_2.Data
@inject SchoolDbContext dbContext
@inject NavigationManager nav
<h3>Edit Student</h3>

<!-- Add a table to display the list of students -->
<table class="table">
    <thead>
        <tr>
            <th>Student Name</th>
            <th>Major</th>
            <th>Standing</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr>
                <td>@student.sname</td>
                <td>@student.major</td>
                <td>@student.standing</td>
                <td>
                    <!-- Add a delete button for each student -->
                    <button class="btn btn-danger" @onclick="() => DeleteStudent(student.sid)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Add a form to edit or add a new student -->
<h3>Edit/Add Student</h3>
<EditForm Model="@Student" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="sname">Student Name</label>
        <InputText id="sname" @bind-Value="Student.sname" class="form-control" />
        <ValidationMessage For="@(() => Student.sname)" />
    </div>

    <div class="form-group">
        <label for="major">Major</label>
        <InputText id="major" @bind-Value="Student.major" class="form-control" />
        <ValidationMessage For="@(() => Student.major)" />
    </div>

    <div class="form-group">
        <label for="standing">Standing</label>
        <InputNumber id="standing" @bind-Value="Student.standing" class="form-control" />
        <ValidationMessage For="@(() => Student.standing)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private Student Student { get; set; } = new Student();
    List<Student> students;

    protected override void OnInitialized()
    {
        var studentsWithoutClassesInDept22 = dbContext.Students
    .Where(student => !dbContext.Enrolleds
        .Any(Enrolleds => Enrolleds.sid == student.sid &&
                           dbContext.Classes
                               .Any(@class => @class.cid == Enrolleds.cid &&
                                              dbContext.Faculties
                                                  .Any(faculty => faculty.fid == @class.fid &&
                                                                  faculty.deptid == 22))))
    .Select(student => new
    {
        student.sid,
        student.major
    })
    .ToList();
    }
    public void studentswithoutmarks()
    {
        var studentsWithoutMarks = dbContext.Students
    .Where(student => dbContext.Enrolleds
        .Any(Enrolleds => Enrolleds.sid == student.sid &&
                           dbContext.marks
                               .All(mark => mark.sid != student.sid)))
    .Select(student => new
    {
        student.Id,
        student.Name
    })
    .ToList();

    }
    public void Studentenrollmoresubjects()
    {
        var studentsEnrolledInMoreThanTwoClasses = dbContext.Students
    .Where(student => dbContext.Enrolleds
        .Count(enrollment => enrollment.sid == student.sid) > 2)
    .Select(student => new
    {
        StudentName = student.sname,
        NumberOfClassesEnrolled = dbContext.Enrolleds
            .Count(Enrolled => Enrolled.sid == student.sid)
    })
    .ToList();

    }
    private void HandleValidSubmit()
    {
        // Add or update the student in the database
        if (Student.sid == 0)
        {
            // If the student ID is 0, it's a new student, so add them to the database
            dbContext.Students.Add(Student);
        }
        else
        {
            // If the student ID is not 0, it's an existing student, so update them in the database
            dbContext.Students.Update(Student);
        }

        dbContext.SaveChanges();

        // Clear the form after submission
        Student = new Student();

        // Refresh the list of students
        students = dbContext.Students.ToList();

        Console.WriteLine("Student data submitted successfully!");
    }

    private void DeleteStudent(int studentId)
    {
        // Delete the student from the database
        var studentToDelete = dbContext.Students.Find(studentId);
        if (studentToDelete != null)
        {
            dbContext.Students.Remove(studentToDelete);
            dbContext.SaveChanges();
        }

        // Refresh the list of students
        students = dbContext.Students.ToList();

        Console.WriteLine("Student deleted successfully!");
    }
}
